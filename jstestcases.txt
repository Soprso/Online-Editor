üü¢ 1. Basic Cases (Easy)
1Ô∏è‚É£ Hello World
javascript
Copy
Edit
console.log("Hello, JavaScript!");
2Ô∏è‚É£ Variable Operations
javascript
Copy
Edit
let a = 10, b = 5;
console.log("Sum:", a + b);
console.log("Product:", a * b);
console.log("Power:", a ** b);
3Ô∏è‚É£ Loops
javascript
Copy
Edit
for (let i = 1; i <= 5; i++) {
    console.log("Count:", i);
}
4Ô∏è‚É£ Array Manipulation
javascript
Copy
Edit
let numbers = [1, 2, 3, 4, 5];
numbers.push(6);
console.log("Updated Array:", numbers);
5Ô∏è‚É£ Object Handling
javascript
Copy
Edit
let person = { name: "Alice", age: 25 };
console.log("Person Info:", person);
üü° 2. Medium Complexity
6Ô∏è‚É£ Async/Await - Fetch API Test
javascript
Copy
Edit
console.log("Fetching data...");
const response = await fetch("https://jsonplaceholder.typicode.com/posts");
const data = await response.json();
console.log("Fetched Posts:", data.length);
7Ô∏è‚É£ Promises Handling
javascript
Copy
Edit
function delayedMessage() {
    return new Promise(resolve => {
        setTimeout(() => {
            resolve("This is an async message after 2 seconds!");
        }, 2000);
    });
}

delayedMessage().then(msg => console.log(msg));
8Ô∏è‚É£ Callback Functions
javascript
Copy
Edit
function greet(name, callback) {
    console.log("Hello, " + name);
    callback();
}

function farewell() {
    console.log("Goodbye!");
}

greet("Alice", farewell);
9Ô∏è‚É£ Simulating Heavy Computation
javascript
Copy
Edit
let sum = 0;
for (let i = 0; i < 1e7; i++) { sum += i; }
console.log("Final sum:", sum);
üî¥ 3. Hard Cases & Edge Cases
üîü Circular References
javascript
Copy
Edit
let objA = {};
let objB = { ref: objA };
objA.ref = objB; // Creates a circular reference
console.log(objA);
1Ô∏è‚É£1Ô∏è‚É£ Infinite Loop Detection (Should Timeout)
javascript
Copy
Edit
while (true) {
    console.log("This should stop after reaching the time limit!");
}
1Ô∏è‚É£2Ô∏è‚É£ Loop That Looks Infinite But Isn't
javascript
Copy
Edit
let x = 0;
while (x < 1e6) { x++; }
console.log("Loop completed:", x);
1Ô∏è‚É£3Ô∏è‚É£ Asynchronous Timeout & Interval Test
javascript
Copy
Edit
console.log("Starting Timers...");

setTimeout(() => console.log("This message appears after 3 seconds"), 3000);

let count = 0;
const interval = setInterval(() => {
    console.log("Repeating...", ++count);
    if (count === 5) clearInterval(interval);
}, 1000);
1Ô∏è‚É£4Ô∏è‚É£ Fetching Multiple APIs (Chained Promises)
javascript
Copy
Edit
async function fetchMultipleAPIs() {
    console.log("Fetching users...");
    const usersResponse = await fetch("https://jsonplaceholder.typicode.com/users");
    const users = await usersResponse.json();

    console.log("Fetching posts...");
    const postsResponse = await fetch("https://jsonplaceholder.typicode.com/posts");
    const posts = await postsResponse.json();

    console.log(`Fetched ${users.length} users and ${posts.length} posts.`);
}

fetchMultipleAPIs();
1Ô∏è‚É£5Ô∏è‚É£ Deeply Nested Recursion
javascript
Copy
Edit
function deepRecursion(n) {
    if (n <= 0) return "Done!";
    return deepRecursion(n - 1);
}

console.log(deepRecursion(10000)); // Large recursion depth
üí• Ultimate Stress Test
1Ô∏è‚É£6Ô∏è‚É£ Web Worker Stress Test
javascript
Copy
Edit
let total = 0;
for (let i = 0; i < 1e8; i++) {
    total += Math.sqrt(i);
}
console.log("Computation Done:", total);
1Ô∏è‚É£7Ô∏è‚É£ Promise.all vs. Promise.race
javascript
Copy
Edit
const task1 = new Promise(resolve => setTimeout(() => resolve("Task 1 Done"), 3000));
const task2 = new Promise(resolve => setTimeout(() => resolve("Task 2 Done"), 1000));
const task3 = new Promise(resolve => setTimeout(() => resolve("Task 3 Done"), 2000));

Promise.all([task1, task2, task3]).then(console.log);
Promise.race([task1, task2, task3]).then(result => console.log("Fastest Task:", result));
üöÄ Now, Test Your JavaScript Editor!
Try each easy, medium, and hard case to make sure your loading screen appears properly, timeout handling works, and outputs are displayed correctly! üöÄüí°
